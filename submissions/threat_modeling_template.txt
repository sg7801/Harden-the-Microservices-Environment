Docker Thread Modeling 
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

1.Repudiation : Malicious images may be committed without authorization by an attacker. This affects image security.
2. Tampering : Docker client and deomon configuration will be tempered by an attacker.
3.Information Disclosure : The client may expose sensitive information such as secrets that are hardcoded in configuration files that could impact the security of the Dockerfile.
4. Elevation of Privilege : If user name is not define in the Dockerfile and container runs as root, an attacker will access all other container on the same host, leading toisolation tempering
5. Spooling : An attacker might spoof the docker daemon or docker registry and introduct spoofed images and trick to using this image to the user.

Kubernetes Threat Modeling

1. Tampering : The configuration of etcd may be tampered with by an attacker, modifying vital system-level configurations such as pod specs. This can be mitigated by restricting permissions on etcd files to 644 or more restrictive and that the pod spec file is set to root ownership.
2. Spoofing : The connection between the API server and kubelet can be spoofed. This can be mitigated by using kubelet uses strong encryption that does not have cryptographic flaws, strong TLS ciphers should be used.
3. Repudiation : Unauthorized changes can be made to kubelet. To avoid this, kubelet authentication should be TLS and weak/ basic auth should not be allowed.
4. Information Disclosure : Sensitive information may be exposed via the etcd key-value store. This can be mitigated by encrypting etcd content at rest and using TLS to access etcd only from the kube-apiserver. All other traffic should be rejected.
5. Elevation of Privilege : Kubelet can be subject to an elevation of privilege. To ensure privileges cannot be escalated, make sure the authorization mode argument is not set to always allow.

Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22)

- 2.2.b Ensure the logging level is set to 'info'. Setting up an appropriate log level, configures the Docker daemon to log events that you would want to review later. A base log level of info and above would capture all logs except debug logs. Until and unless required, you should not run Docker daemon at debug log level.
- 4.5 Ensure Content trust for Docker is Enabled. Content trust provides the ability to use digital signatures for data sent to and received from remote Docker registries. These signatures allow client-side verification of the identity and the publisher of specific image tags and ensures the provenance of container images.
- 2.1 Ensure network traffic is restricted between containers on the default bridge. By default, unrestricted network traffic is enabled between all containers on the same host on the default network bridge. Thus, each container has the potential of reading all packets across the container network on the same host. This might lead to an unintended and unwanted disclosure of information to other containers. Hence, restrict inter-container communication on the default network bridge.
